@model PBL3.ViewModels.Chapter.ChapterDetailViewModel
@{
    ViewData["Title"] = Model.Title;
    Layout = "~/Views/Shared/_UserLayout.cshtml";
}

@functions {
    string GetTimeAgo(DateTime? date)
    {
        var span = DateTime.Now - date;
        if (span?.TotalDays >= 1) return $"{(int)span?.TotalDays} ngày";
        if (span?.TotalHours >= 1) return $"{(int)span?.TotalHours} giờ";
        if (span?.TotalMinutes >= 1) return $"{(int)span?.TotalMinutes} phút";
        return "Vừa xong";
    }
    int CountAllComments(IEnumerable<PBL3.ViewModels.Chapter.CommentTreeViewModel> comments)
    {
		int total = 0;
		foreach (var comment in comments)
		{
			total += 1; 
			if (comment.Replies != null && comment.Replies.Any())
			{
				total += CountAllComments(comment.Replies); 
			}
		}
		return total;
	}
}

@section Styles {
	<link href="~/css/user-readchapter.css" rel="stylesheet" />
}
<style>
	.custom-style {
		background-color: @Model.Style.BackgroundColorHex;
		color: @Model.Style.TextColorHex;
	}
</style>

<div id="overlay" onclick="toggleSidebar()"></div>

<!-- Sidebar Danh sách chương -->
<div id="chapterSidebar">
	<div class="card-body">
		<h5 class="card-title">Danh sách chương</h5>

		<ul id="chap_list" class="unstyled">
			@foreach (var chap in Model.ChapterList)
			{
				<li class="@(chap.ChapterID == Model.ChapterID ? "current" : "")">
					<a href="@Url.Action("ReadChapter", "Chapter", new { id = chap.ChapterID })" class="d-block text-decoration-none">
						@chap.Title
					</a>
				</li>
			}
		</ul>
	</div>
</div>


<!-- Thanh nav dọc -->
<div id="floatingNav">
	<!-- Chương trước -->
	<a asp-controller="Chapter" asp-action="ReadChapter" asp-route-id="@Model.PreviousChapterID"
	class="btn btn-outline-secondary btn-sm @(Model.PreviousChapterID == -1 ? "disabled" : "")" title="Chương trước">
		<i class="bi bi-arrow-left"></i>
	</a>

	<!-- Quay lại truyện -->
	<a asp-controller="Story" asp-action="View" asp-route-id="@Model.StoryID"
	class="btn btn-outline-secondary btn-sm" title="Quay lại truyện">
		<i class="bi bi-house-door"></i>
	</a>

	<!-- Like -->
	<form asp-action="LikeChapter" asp-controller="LikeChapter" method="post" class="m-0 p-0 d-flex justify-content-center">
		@Html.AntiForgeryToken()
		<input type="hidden" name="chapterId" value="@Model.ChapterID" />
		<button type="submit" class="btn btn-sm @(Model.IsLikedByCurrentUser ? "btn-danger" : "btn-outline-danger") w-100" title="Thích chương này">
			<i class="bi bi-heart@(Model.IsLikedByCurrentUser ? "-fill" : "")"></i>
		</button>
	</form>

	<!-- Bookmark -->
	<button class="btn btn-outline-primary btn-sm" title="Bookmark chương này">
		<i class="bi bi-bookmark"></i>
	</button>

	<!-- Danh sách chương -->
	<button class="btn btn-outline-secondary btn-sm" onclick="toggleSidebar()" title="Danh sách chương">
		<i class="bi bi-list"></i>
	</button>

	<!-- Cài đặt đọc -->
	<button class="btn btn-outline-secondary btn-sm" title="Cài đặt đọc" data-bs-toggle="modal" data-bs-target="#styleModal">
		<i class="bi bi-gear"></i>
	</button>

	<!-- Chương sau -->
	<a asp-controller="Chapter" asp-action="ReadChapter" asp-route-id="@Model.NextChapterID"
	class="btn btn-outline-secondary btn-sm @(Model.NextChapterID == -1 ? "disabled" : "")" title="Chương sau">
		<i class="bi bi-arrow-right"></i>
	</a>
</div>

<!-- Nội dung chương -->
<div class="container-fluid py-4 position-relative custom-style" onclick="showFloatingNav()">
	<div class="card borderless custom-style">
		<div class="card-body custom-style">

			<!-- Thông tin tiêu đề chương -->
			<div class="chapter-header text-center py-3">
				<h2 class="title-item text-xl fw-bold">@Model.StoryTitle</h2>
				<h4 class="title-item fw-bold">@Model.Title</h4>
				<h6 class="chapter-meta">
					<a href="#chapter-comments" class="text-decoration-underline">@CountAllComments(Model.Comments) Bình luận</a> -
					Độ dài: @Model.TotalWord từ -
					Cập nhật:
					<time title="@Model.UpdatedAt?.ToString("dd-MM-yyyy HH:mm:ss")" datetime="@Model.UpdatedAt?.ToString("s")">
						@GetTimeAgo(Model.UpdatedAt)
					</time>
				</h6>
			</div>

			<hr />

			<!-- Nội dung văn bản -->
			<div class="chapter-content center-cl" style="white-space: pre-line; font-family: @Model.Style.FontFamily.ToString(); font-size: @(Model.Style.FontSize + "px")">
				@Html.Raw(Model.Content)
			</div>

			<hr />

			<!-- Navigation dưới chương -->
			<div class="chapter-navigation d-flex justify-content-center gap-3 my-4">
				@if (Model.PreviousChapterID != -1)
				{
					<a asp-controller="Chapter" asp-action="ReadChapter" asp-route-id="@Model.PreviousChapterID" class="btn btn-outline-secondary" title="Chương trước">
						<i class="bi bi-arrow-left"></i>
					</a>
				}
				else
				{
					<button class="btn btn-outline-secondary disabled" disabled title="Chương trước"><i class="bi bi-arrow-left"></i></button>
				}

				<button class="btn btn-outline-info" onclick="toggleSidebar()" title="Danh sách chương">
					<i class="bi bi-list"></i>
				</button>

				@if (Model.NextChapterID != -1)
				{
					<a asp-controller="Chapter" asp-action="ReadChapter" asp-route-id="@Model.NextChapterID" class="btn btn-outline-secondary" title="Chương sau">
						<i class="bi bi-arrow-right"></i>
					</a>
				}
				else
				{
					<button class="btn btn-outline-secondary disabled" disabled title="Chương sau"><i class="bi bi-arrow-right"></i></button>
				}
			</div>

			<!-- Phần bình luận -->
			<div class="chapter-comments center-cl">
				<h5 class="mb-3" id="chapter-comments">Bình luận (@CountAllComments(Model.Comments))</h5>

				<!-- Form bình luận -->
				<form asp-action="Post" asp-controller="Comment" method="post" class="comment-form mb-4">
					@Html.AntiForgeryToken()
					<input type="hidden" name="ChapterID" value="@Model.ChapterID" />
					<input type="hidden" name="UserID" value="@User.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value" />
					<input type="hidden" name="ParentCommentID" id="parentCommentInput" value="" />
					<input type="hidden" name="type" value="chapter" />

					<small class="text-muted">Đang trả lời: <span id="replyingToDisplay"></span></small>

					<div class="mb-3 mt-2">
						<textarea name="Content" rows="3" class="form-control" placeholder="Viết bình luận..."></textarea>
					</div>

					<div class="d-flex justify-content-between align-items-center">
						<button type="submit" class="btn btn-primary">Gửi bình luận</button>
						<button type="button" class="btn btn-link d-none" id="cancelReplyBtn" onclick="cancelReply()">Hủy trả lời</button>
					</div>
				</form>

				<!-- Danh sách bình luận -->
				<div class="comment-box" id="commentList">
					@foreach (var comment in Model.Comments)
					{
						@Html.Partial("_CommentPartial", comment)
					}
				</div>
				<div id="paginationControls" class="mt-3 text-center"></div>
			</div>

		</div>
	</div>
</div>

<!-- Modal Cài đặt đọc -->
<div class="modal fade" id="styleModal" tabindex="-1" aria-labelledby="styleModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<form asp-action="UpdateStyle" asp-controller="Style" method="post" id="styleForm">
				@Html.AntiForgeryToken()
				<input type="hidden" name="UserID" value="@Model.Style.UserID" />
				<input type="hidden" name="StyleID" value="@Model.Style.StyleID" />
				<input type="hidden" name="ReturnChapterID" value="@Model.ChapterID" />

				<div class="modal-header">
					<h5 class="modal-title" id="styleModalLabel">Cài đặt đọc</h5>
					<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Đóng"></button>
				</div>

				<div class="modal-body">

					<!-- Font chữ -->
					<div class="mb-3">
						<label for="FontFamily" class="form-label">Phông chữ</label>
						<select name="FontFamily" class="form-select">
							@foreach (var font in Enum.GetValues(typeof(PBL3.Models.FontFamily)))
							{
								var isSelected = Model.Style.FontFamily == (PBL3.Models.FontFamily)font ? "selected" : "";
								@Html.Raw($"<option value=\"{font}\" {isSelected}>{font}</option>")
							}
						</select>
					</div>

					<!-- Cỡ chữ -->
					<div class="mb-3">
						<label for="FontSize" class="form-label">Cỡ chữ (px)</label>
						<input type="number" name="FontSize" class="form-control" value="@Model.Style.FontSize" min="12" max="48" />
					</div>

					<!-- Màu nền -->
					<div class="mb-3">
						<label for="BackgroundColor" class="form-label">Màu nền</label>
						<select name="BackgroundColor" class="form-select">
							@foreach (var bg in Enum.GetValues(typeof(PBL3.Models.BackgroundColor)))
							{
								var isSelected = Model.Style.BackgroundColor == (PBL3.Models.BackgroundColor)bg ? "selected" : "";
								@Html.Raw($"<option value=\"{bg}\" {isSelected}>{bg}</option>")
							}
						</select>
					</div>

					<!-- Màu chữ hiển thị (read-only) -->
					<div class="mb-3">
						<label class="form-label">Màu chữ hiển thị</label>
						<input type="color" class="form-control form-control-color" value="@Model.Style.TextColorHex" disabled />
					</div>

					<!-- Màu nền hiển thị (read-only) -->
					<div class="mb-3">
						<label class="form-label">Màu nền hiển thị</label>
						<input type="color" class="form-control form-control-color" value="@Model.Style.BackgroundColorHex" disabled />
					</div>

				</div>

				<div class="modal-footer">
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Hủy</button>
					<button type="submit" class="btn btn-primary">Lưu thay đổi</button>
				</div>
			</form>
		</div>
	</div>
</div>


@section Scripts {
	<script>
		// Mở/đóng sidebar
		function toggleSidebar() {
			var sidebar = document.getElementById('chapterSidebar');
			var overlay = document.getElementById('overlay');
			if (sidebar.classList.contains('active')) {
				sidebar.classList.remove('active');
				overlay.style.display = 'none';
			} else {
				sidebar.classList.add('active');
				overlay.style.display = 'block';
			}
		}

		// Hiện thanh nav khi click vào chương
		function showFloatingNav() {
			document.getElementById('floatingNav').style.display = 'flex';
		}
	</script>

	<script>
		$(document).ready(function () {
			$("#styleForm").submit(function (e) {
				e.preventDefault(); // chặn form gửi theo cách mặc định

				var form = $(this);
				var formData = form.serialize();

				$.ajax({
					type: "POST",
					url: form.attr("action"),
					data: formData,
					success: function (response) {
						// Bạn có thể cập nhật UI ở đây nếu cần

						// Đóng modal
						$('#yourModalId').modal('hide');

						// Có thể reload chapter để áp dụng style mới nếu cần
						// location.reload();
					},
					error: function (xhr, status, error) {
						alert("Đã xảy ra lỗi: " + error);
					}
				});
			});
		});
	</script>

	<script>
		function replyToComment(commentId) {
			document.getElementById("parentCommentInput").value = commentId;
			document.getElementById("cancelReplyBtn").classList.remove("d-none");
			document.querySelector('input[name="type"]').value = "reply";

			const replyingTo = document.querySelector(`#comment-${commentId} .comment-user`);

			if (replyingTo) {
				document.getElementById("replyingToDisplay").innerText = replyingTo.textContent;

			}

		}

		function cancelReply() {
			document.getElementById("parentCommentInput").value = "";
			document.getElementById("replyingToDisplay").innerText = "";
			document.getElementById("cancelReplyBtn").classList.add("d-none");


			document.querySelector('input[name="type"]').value = "chapter";
		}
	</script>
	<script>
		document.addEventListener("DOMContentLoaded", function () {
			const commentsPerPage = 5;
			const commentList = document.getElementById("commentList");
			const comments = Array.from(commentList.children);
			const totalPages = Math.ceil(comments.length / commentsPerPage);
			const paginationControls = document.getElementById("paginationControls");

			function showPage(page) {
				const start = (page - 1) * commentsPerPage;
				const end = start + commentsPerPage;

				comments.forEach((comment, index) => {
					comment.style.display = (index >= start && index < end) ? "block" : "none";
				});

				renderPagination(page);
			}

			function renderPagination(currentPage) {
				paginationControls.innerHTML = "";

				for (let i = 1; i <= totalPages; i++) {
					const btn = document.createElement("button");
					btn.innerText = i;
					btn.className = "btn btn-sm " + (i === currentPage ? "btn-primary" : "btn-outline-primary");
					btn.style.margin = "0 5px";
					btn.onclick = () => showPage(i);
					paginationControls.appendChild(btn);
				}
			}

			// Khởi tạo trang đầu tiên
			if (comments.length > commentsPerPage) {
				showPage(1);
			}
		});
	</script>
}


