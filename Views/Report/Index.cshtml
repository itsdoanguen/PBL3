@model List<PBL3.Models.NotificationModel>
@using PBL3.Models
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer
@{
    ViewData["Title"] = Localizer["Reports Management"];
    Layout = "~/Views/Shared/_Layout.cshtml";
    var reportGroups = Model.GroupBy(r => r.Type).ToDictionary(g => g.Key, g => g.ToList());
    string GetReportTypeName(NotificationModel.NotificationType type) => type switch {
        NotificationModel.NotificationType.ReportUser => Localizer["ReportUser"].Value,
        NotificationModel.NotificationType.ReportComment => Localizer["ReportComment"].Value,
        NotificationModel.NotificationType.ReportChapter => Localizer["ReportChapter"].Value,
        NotificationModel.NotificationType.ReportStory => Localizer["ReportStory"].Value,
        _ => Localizer["Other"].Value
    };
    var reportTypes = new[] {
        NotificationModel.NotificationType.ReportUser,
        NotificationModel.NotificationType.ReportComment,
        NotificationModel.NotificationType.ReportChapter,
        NotificationModel.NotificationType.ReportStory
    };
}

<h2 class="mb-4 text-center fw-bold display-6 mt-5" style="letter-spacing:0.5px; margin-top: 18px; margin-bottom: 28px; color: #0d6efd; background: #fff; border-radius: 12px; box-shadow: 0 2px 12px rgba(0,0,0,0.06); padding: 18px 0 14px 0;">@Localizer["Reports Management"]</h2>

<ul class="nav nav-tabs mb-3" id="reportTab" role="tablist">
    @for (int i = 0; i < reportTypes.Length; i++)
    {
        var type = reportTypes[i];
        var count = reportGroups.ContainsKey(type) ? reportGroups[type].Count(r => !r.IsRead) : 0;
        <li class="nav-item" role="presentation">
            <button class="nav-link @(i == 0 ? "active" : "")" id="tab-@type" data-bs-toggle="tab" data-bs-target="#tab-pane-@type" type="button" role="tab" aria-controls="tab-pane-@type" aria-selected="@(i == 0 ? "true" : "false")">
                @GetReportTypeName(type)
                @if (count > 0)
                {
                    <span class="badge bg-danger ms-1">@count</span>
                }
            </button>
        </li>
    }
</ul>
<div class="tab-content" id="reportTabContent">
    @for (int i = 0; i < reportTypes.Length; i++)
    {
        var type = reportTypes[i];
        var reports = reportGroups.ContainsKey(type) ? reportGroups[type] : new List<NotificationModel>();
        <div class="tab-pane fade @(i == 0 ? "show active" : "")" id="tab-pane-@type" role="tabpanel" aria-labelledby="tab-@type">
            <h4>@GetReportTypeName(type)</h4>
            @if (reports.Count == 0)
            {
                <div class="alert alert-info">@Localizer["No Reports"]</div>
            }
            else
            {
                <table class="table table-bordered table-hover table-report">
                    <thead>
                        <tr>
                            <th style="width: 10%; min-width: 90px; text-align:center;">@Localizer["Time"]</th>
                            <th style="width: auto; min-width: 200px;">@Localizer["Content"]</th>
                            <th style="width: 10%; min-width: 90px; text-align:center;">@Localizer["Sender"]</th>
                            <th style="width: 15%; min-width: 110px; text-align:center;">@Localizer["Navigate"]</th>
                            <th style="width: 16%; min-width: 90px; text-align:center;">@Localizer["Status"]</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var r in reports)
                        {
                            <tr class="@(r.IsRead ? "" : "table-danger")">
                                <td style="text-align:center">@r.CreatedAt.ToString("dd/MM/yyyy HH:mm")</td>
                                <td>@r.Message</td>
                                <td style="text-align:center">
                                    @if (r.FromUser != null && !string.IsNullOrEmpty(r.FromUser.DisplayName))
                                    {
                                        <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ViewProfile", "User", new { id = r.FromUser.UserID })" target="_blank">@r.FromUser.DisplayName</a>
                                    }
                                    else if (r.FromUserID.HasValue)
                                    {
                                        <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ViewProfile", "User", new { id = r.FromUserID })" target="_blank">ID: @r.FromUserID</a>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </td>
                                <td style="text-align:center">
                                    @switch (type)
                                    {
                                        case NotificationModel.NotificationType.ReportUser:
                                            <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ViewUser", "Moderator", new { id = r.UserID })" target="_blank">@Localizer["Go to User"]</a>
                                            break;
                                        case NotificationModel.NotificationType.ReportComment:
                                            if (r.ChapterID != null && r.CommentID != null)
                                            {
                                                <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ReadChapter", "Chapter", new { id = r.ChapterID })#comment-@r.CommentID" target="_blank">@Localizer["Go to Comment Chapter"]</a>
                                            }
                                            else if (r.StoryID != null && r.CommentID != null)
                                            {
                                                <a class="btn btn-sm btn-outline-primary" href="@Url.Action("View", "Story", new { id = r.StoryID })#comment-@r.CommentID" target="_blank">@Localizer["Go to Comment Story"]</a>
                                            }
                                            else
                                            {
                                                <span class="text-muted">@Localizer["Unknown"]</span>
                                            }
                                            break;
                                        case NotificationModel.NotificationType.ReportChapter:
                                            <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ViewStory", "Moderator", new { id = r.StoryID ?? 0 })" target="_blank">@Localizer["Go to Chapter"]</a>
                                            break;
                                        case NotificationModel.NotificationType.ReportStory:
                                            <a class="btn btn-sm btn-outline-primary" href="@Url.Action("ViewStory", "Moderator", new { id = r.StoryID ?? 0 })" target="_blank">@Localizer["Go to Story"]</a>
                                            break;
                                    }
                                </td>
                                <td>
                                    @if (!r.IsRead)
                                    {
                                        
                                        <span class="badge bg-danger">@Localizer["Unprocessed"]</span>
                                        <form asp-controller="Report" asp-action="MarkAsRead" method="post" class="d-inline ms-2" onsubmit="return confirm('@Localizer["Confirm Process Report"]')">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="notificationId" value="@r.NotificationID" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger">@Localizer["Process"]</button>
                                        </form>
                                    }
                                    else
                                    {
                                        <span class="badge bg-success">@Localizer["Processed"]</span>
                                        <form asp-controller="Report" asp-action="DeleteNotification" method="post" class="d-inline ms-2" onsubmit="return confirm('@Localizer["Delete Confirmation"]');">
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="notificationId" value="@r.NotificationID" />
                                            <button type="submit" class="btn btn-sm btn-outline-danger">@Localizer["Delete"]</button>
                                        </form>
                                    }
                                </td>
                            </tr>
                            <script>
                                console.log('Report row:', {
                                    NotificationID: '@r.NotificationID',
                                    UserID: '@(r.UserID.ToString() ?? "null")',
                                    FromUserID: '@(r.FromUserID?.ToString() ?? "null")',
                                    ChapterID: '@(r.ChapterID?.ToString() ?? "null")',
                                    StoryID: '@(r.StoryID?.ToString() ?? "null")',
                                    CommentID: '@(r.CommentID?.ToString() ?? "null")',
                                    Type: '@r.Type',
                                    // If you want to log nested Comment object IDs:
                                    Comment_ChapterID: '@(r.Comment?.ChapterID?.ToString() ?? "null")',
                                    Comment_StoryID: '@(r.Comment?.StoryID?.ToString() ?? "null")'
                                });
                            </script>
                        }
                    </tbody>
                </table>
            }
        </div>
    }
</div>

@section Styles {
    <link href="~/css/report-index.css" rel="stylesheet" />
}
@section Scripts {
    <script src="~/js/report-index.js"></script>
    <script>
        const url = new URL(window.location.href);
        const hash = url.hash;
        if (hash && hash.startsWith("#tab-pane-")) {
            const tabTrigger = document.querySelector(`button[data-bs-target='${hash}']`);
            if (tabTrigger) {
                new bootstrap.Tab(tabTrigger).show();
            }
        }
    </script>
}

@functions {
    string GetFromUserDisplay(NotificationModel noti) {
        if (noti.FromUser != null && !string.IsNullOrEmpty(noti.FromUser.DisplayName))
            return noti.FromUser.DisplayName;
        if (noti.FromUserID.HasValue)
            return $"ID: {noti.FromUserID}";
        return "-";
    }
}
