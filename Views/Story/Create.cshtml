@using PBL3.ViewModels.Story
@using Microsoft.AspNetCore.Mvc.Localization
@model StoryCreateViewModel
@inject IViewLocalizer Localizer

@{
	ViewData["Title"] = Localizer["CreateNewStory"].Value;
	Layout = "~/Views/Shared/_StoryEditorLayout.cshtml";
}

@if (TempData["SuccessMessage"] != null)
{
	<div class="alert alert-success" role="alert">
		@TempData["SuccessMessage"]
	</div>
}

@if (TempData["ErrorMessage"] != null)
{
	<div class="alert alert-danger" role="alert">
		@TempData["ErrorMessage"]
	</div>
}

<div class="container py-5">
	<h2 class="mb-4 text-center">@Localizer["CreateNewStory"]</h2>
	<form asp-action="Create" method="post" enctype="multipart/form-data" class="row g-4">
		<!-- Cột bên trái: Ảnh bìa -->
		<div class="col-md-4 d-flex flex-column align-items-center">
			<label for="coverPreview" class="form-label fw-bold">@Localizer["Cover"]</label>
			<div class="border rounded p-2 w-100 d-flex justify-content-center position-relative" style="height: 350px;">
				<img id="coverPreview" src="/image/default-cover.jpg" class="img-fluid rounded" style="max-height: 100%; object-fit: cover;">
				<div id="imageLoadingSpinner" class="position-absolute top-50 start-50 translate-middle d-none">
					<div class="spinner-border text-primary" role="status">
						<span class="visually-hidden">@Localizer["Loading"]</span>
					</div>
				</div>
			</div>
			<input type="file" id="coverInput" name="UploadCover" class="form-control mt-2" accept="image/jpeg,image/jpg,image/png" onchange="previewImage(this)">
			<small class="text-muted mt-1">@Localizer["FileTypeAccepted"]</small>
			<span asp-validation-for="UploadCover" class="text-danger"></span>
			<div id="imageError" class="text-danger mt-1" style="display: none;"></div>
		</div>

		<!-- Cột bên phải: Form nhập thông tin -->
		<div class="col-md-8">
			<div class="mb-3">
				<label for="Title" class="form-label fw-bold">@Localizer["Title"]</label>
				<input asp-for="Title" class="form-control" required />
				<span asp-validation-for="Title" class="text-danger"></span>
			</div>

			<div class="mb-3">
				<label for="Description" class="form-label fw-bold">@Localizer["Description"]</label>
				<textarea asp-for="Description" class="form-control" rows="8" required></textarea>
				<span asp-validation-for="Description" class="text-danger"></span>
			</div>

			<!-- Thể loại -->
			<div class="mb-3 position-relative">
				<label class="form-label fw-bold">@Localizer["Genres"]</label>
				<div id="genreTagList" class="genre-tag-list">
					@foreach (var genre in Model.availbleGenres.Where(g => g.IsSelected))
					{
						<span class="genre-tag" data-genre-id="@genre.GenreID">
							@genre.Name <button type="button" class="remove-genre" title="@Localizer["Remove"]">&times;</button>
						</span>
					}
					<span class="ms-1"><button type="button" class="btn-add-genre" id="btnAddGenre" title="@Localizer["AddGenre"]"><i class="bi bi-plus"></i></button></span>
				</div>
				<input type="hidden" id="GenreIDsInput" />
				<div id="genreDropdown" class="genre-dropdown">
					@foreach (var genre in Model.availbleGenres.Where(g => !g.IsSelected))
					{
						<div class="genre-dropdown-item" data-genre-id="@genre.GenreID">@genre.Name</div>
					}
				</div>
				<span asp-validation-for="GenreIDs" class="text-danger"></span>
			</div>

			<button type="submit" class="btn btn-success w-100" id="submitBtn">
				<i class="fas fa-plus me-2"></i>@Localizer["CreateStory"]
			</button>
		</div>
	</form>
</div>

<link rel="stylesheet" href="~/css/story-create.css" asp-append-version="true" />
<script src="~/js/story-create.js" asp-append-version="true"></script>

<script>
	function previewImage(input) {
		const file = input.files[0];
		const preview = document.getElementById('coverPreview');
		const errorDiv = document.getElementById('imageError');
		const loadingSpinner = document.getElementById('imageLoadingSpinner');
		
		// Reset trạng thái
		errorDiv.style.display = 'none';
		errorDiv.textContent = '';
		
		if (!file) {
			preview.src = '/image/default-cover.jpg';
			return;
		}
		
		// Validate file type
		const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png'];
		if (!allowedTypes.includes(file.type)) {
			errorDiv.textContent = '@Localizer["InvalidFileType"]';
			errorDiv.style.display = 'block';
			input.value = '';
			return;
		}
		
		// Validate file size (1MB = 1048576 bytes)
		if (file.size > 1048576) {
			errorDiv.textContent = '@Localizer["FileSizeError"]';
			errorDiv.style.display = 'block';
			input.value = '';
			return;
		}
		
		// Show loading
		loadingSpinner.classList.remove('d-none');
		
		const reader = new FileReader();
		reader.onload = function(e) {
			preview.src = e.target.result;
			loadingSpinner.classList.add('d-none');
		};
		reader.onerror = function() {
			errorDiv.textContent = '@Localizer["ImageReadError"]';
			errorDiv.style.display = 'block';
			loadingSpinner.classList.add('d-none');
			input.value = '';
		};
		reader.readAsDataURL(file);
	}
	
	// Prevent form submission if image is loading
	document.getElementById('submitBtn').addEventListener('click', function(e) {
		const loadingSpinner = document.getElementById('imageLoadingSpinner');
		if (!loadingSpinner.classList.contains('d-none')) {
			e.preventDefault();
			alert('@Localizer["WaitForImage"]');
		}
	});
</script>
